-C -s -A -* -S (-f -k -z +k +z -E -F -L -R -T -U -Z -a -i -m)-A[specify that arguments refer to associative arrays] (-f -k -z +k +z -A -F -L -R -T -U -Z -a -i -m)-E[floating point, use engineering notation on output] (-f -k -z +k +z -A -E -L -R -T -U -Z -a -i -m)-F[floating point, use fixed point decimal on output] (-f -k -z +k +z -T)-+H[hide value of parameter in listings] (-f -k -z +k +z -A -E -F -i)-L+[left justify and remove leading blanks from value]:width (-f -k -z +k +z -A -E -F -i)-R+[right justify and fill with leading blanks]:width (-f -k -z +k +z -A -E -F -a -g -h -i -l -m -t)-T[tie scalar to array or trace function] (-A -E -F -i)-U[keep array values unique and suppress alias expansion for functions] (-f -k -z +k +z -A -E -F -i)-Z+[right justify and fill with leading zeros]:width (-f -k -z +k +z -A -E -F -T -i)-a[specify that arguments refer to arrays] (-A -E -F -L -R -T -Z -a -g -h -H -i -l -r -x)-f[specify that arguments refer to functions] (-f -k -z +k +z -T)-+g[do not restrict parameter to local scope] (-f -k -z +k +z -T)-+h[hide specialness of parameter] (-f -k -z +k +z -A -E -F -T)-+i[represent internally as an integer] (-A -E -F -L -R -T -Z -a -g -h -H -i -l -r -x -w -z)-+k[mark function for ksh-style autoloading] (-A -E -F -L -R -T -Z -a -g -h -H -i -l -r -x -T)-l[convert the value to lowercase] (-A -E -F -T -i)-m[treat arguments as patterns] -p[output parameters in form of calls to typeset] (-f)-+r[mark parameters as readonly] (-T)-+t[tag parameters and turn on execution tracing for functions] -u[convert the value to uppercase or mark function for autoloading] (-f -k -z +k +z)-+x[export parameter] (-A -E -F -L -R -T -Z -a -g -h -H -i -l -r -x -k -w)-+z[mark function for zsh-style autoloading] *::vars:= ->vars_eq
