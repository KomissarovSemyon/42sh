(- *)-h[display help and exit] (- *)--help[display help and exit] (- *)-H[display longer help and exit] (- *)--man[display longer help and exit] (- *)--version[display version and exit] (--quiet -q -Q --QUIET)-v[print all test lines] (--quiet -q -Q --QUIET)--verbose[print all test lines] -l[add lib to path] --lib[add lib to path] -b[add blib to path] --blib[add blib to path] (--reverse)-s[run tests in random order] (--reverse)--shuffle[run tests in random order] (--nocolor)-c[colored test output] (--nocolor)--color[colored test output] (--color -c)--nocolor[do not color test output] (--nocount)--count[show x/y test count when not verbose] (--count)--nocount[disable x/y test count] -D[dry run] --dry[dry run] --ext=[set extension for tests]:extension: -f[show failed tests] --failures[show failed tests] -o[show comments] --comments[show comments] --ignore-exit[ignore exit status from test scripts] -m[merge STDERR with STDOUT] --merge[merge STDERR with STDOUT] -r[recurse into directories] --recurse[recurse into directories] (-s --shuffle)--reverse[run tests in reverse order] (-v --verbose)-q[suppress some test output] (-v --verbose)--quiet[suppress some test output] (-v --verbose)-Q[only print summary results] (-v --verbose)--QUIET[only print summary results] -p[show full list of TAP parse errors] --parse[show full list of TAP parse errors] --directives[only show results for which TODO or SKIP set] --timer[print elapsed time] --trap[trap ctrl-c and print summary on interrupt] --normalize[normalize TAP output in verbose mode] -T[enable tainting checks] -t[enable tainting warnings] -W[enable fatal warnings] -w[enable warnings] --norc[do not process .proverc] *-I=[library paths to include]:libdir:_directories *-P=[load plugin]:plugin: *-M=[load a module]:module:_perl_m_opt -e[interpreter to run the tests]:program: _command_names -e:*::program arguments: _normal -e[interpreter to run the tests]:program: _command_names --exec:*::program arguments: _normal --exec[interpreter to run the tests]:program: _command_names -e:*::program arguments: _normal --exec[interpreter to run the tests]:program: _command_names --exec:*::program arguments: _normal --harness=[define test harness]:harness: --formatter=[result formatter]:formatter: --source=[load or configure a SourceHandler]:source: -a[store output in archive file]:file:_files --archive[store output in archive file]:file:_files -j[run N jobs in parallel]:jobs: --jobs[run N jobs in parallel]:jobs: *--state=[control persistent state]: :_values -s , state last failed passed all hot todo slow fast new old fresh save --rc=[custom rcfile]:file:_files *--rules=[limit tests run (or not) in parallel]:rules *:file or directory:_files
